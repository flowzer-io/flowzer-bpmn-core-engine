@page "/definition/{DefinitionId}"
@using Microsoft.FluentUI.AspNetCore.Components
@using FlowzerFrontend.Components



<div class="main-content">

    <HeaderElement>
        <LeftSide>
            
            @if (TitleEditMode)
            {
            <FluentTextField @bind-Value=@CurrentMetaDefinition.Name AriaLabel="No label" @onkeyup="OnTitleEditKeyUp"></FluentTextField>
            }
            else
            {
            <span id="current-file-name">@CurrentMetaDefinition.Name</span>
            }
            <button class="button-flat" @onclick="ToggleTitleEditMode"><i class="fa-solid fa-pencil"></i></button>

            <span id="current-file-version">Version: @CurrentDefinition.Version.ToString() </span>
        
        </LeftSide>
        <RigthSide>
            <FluentStack Class="action-button-group">
                @* <FluentCombobox AriaLabel="Pre-selected option" Items="@AvailableVersions" @bind-Value="@CurrentDefinition" Height="200px" /> *@

                <FluentButton IconStart="@(new Icons.Regular.Size16.ArrowUpload())" Appearance="Appearance.Accent" @onclick="OnDeployClick">
                    Deploy
                </FluentButton>
                <FluentButton IconEnd="@(new Icons.Regular.Size16.Save())" @onclick="OnSaveClick">
                    Save
                </FluentButton>
                <FluentButton IconEnd="@(new Icons.Regular.Size16.Bug())">
                    Debug
                </FluentButton>
            </FluentStack>
        </RigthSide>
  
    </HeaderElement>
    



    <div class="content with-diagram" id="designer-container" style="@(IsDocumentLoading || ErrorString != null ? "display: none;" : "")">
        <div class="canvas" id="js-canvas"></div>
        <div class="properties-panel-parent" id="js-properties-panel"></div>
    </div>

    @if (IsDocumentLoading)
    {
        <div>Loading...</div>
    }
    else if (ErrorString != null)
    {
        <div>
            <span>Error :-(</span><br/>
            @ErrorString
        </div>
    }

</div>


<script src="public/app.js"></script>
<script>
    window.notifyBlazorWhenScriptsLoaded = function () {
        // Hier prüfst du, ob alle Skripte geladen sind, und rufst dann die C# Methode auf.
        DotNet.invokeMethodAsync('YourBlazorAppNamespace', 'OnScriptsLoaded');
    };
</script>